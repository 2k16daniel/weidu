<<<<<<<< .../inlined/null.file
>>>>>>>>

DEFINE_ACTION_FUNCTION ~TB#ADD_SPELL_GET_CODE~
  INT_VAR scode = 0
  RET filecode
BEGIN
  OUTER_SET type = scode / 1000
  OUTER_SET rest = scode - type * 1000
  ACTION_IF (type == 1) BEGIN
    OUTER_TEXT_SPRINT memo ~pr~
  END
  ELSE ACTION_IF (type == 2) BEGIN
    OUTER_TEXT_SPRINT memo ~wi~
  END
  ELSE ACTION_IF (type == 3) BEGIN
    OUTER_TEXT_SPRINT memo ~in~
  END
  ELSE ACTION_IF (type == 4) BEGIN
    OUTER_TEXT_SPRINT memo ~cl~
  END ELSE BEGIN
    FAIL ~TB#ADD_SPELL_GET_CODE internal failure: invalid code (%scode%)~
  END
  
  ACTION_IF rest < 10 BEGIN
    OUTER_SPRINT filecode ~%memo%00%rest%~
  END ELSE ACTION_IF rest < 100 BEGIN
    OUTER_SPRINT filecode ~%memo%0%rest%~
  END ELSE BEGIN
    OUTER_SPRINT filecode ~%memo%%rest%~
  END
END

DEFINE_ACTION_FUNCTION ~TB#ADD_SPELL_CHECK_MATCH~
  INT_VAR scode = 0
  RET doesmatch
BEGIN
  ACTION_IF scode < 1000 || scode >= 5000 BEGIN
    OUTER_SET doesmatch = 0
  END ELSE BEGIN
    OUTER_SET newtype  = scode / 1000
    OUTER_SET newlevel = scode / 100 - newtype * 10
    OUTER_SET doesmatch = newtype = type && newlevel = level
  END
END

DEFINE_ACTION_FUNCTION ~TB#ADD_SPELL_FIND_SLOT~
  RET code
BEGIN
  OUTER_PATCH ~~ BEGIN
    SET max_spell = 0
    PATCH_IF (type == 1) BEGIN
      TEXT_SPRINT memo ~pr~
      SET max_spell = 50
    END
    ELSE PATCH_IF (type == 2) BEGIN
      TEXT_SPRINT memo ~wi~
      SET max_spell = 50
    END
    ELSE PATCH_IF (type == 3) BEGIN
      TEXT_SPRINT memo ~in~
      SET max_spell = 99
    END
    ELSE PATCH_IF (type == 4) BEGIN
      TEXT_SPRINT memo ~cl~
      SET max_spell = 99
    END
    SET found_slot = 0
    FOR (num = 1; num <= max_spell && !found_slot; num += 1) BEGIN
      PATCH_IF (num < 10) BEGIN
        TEXT_SPRINT num ~0%num%~
      END
      TEXT_SPRINT code ~%type%%level%%num%~
      LOOKUP_IDS_SYMBOL_OF_INT cur_id ~spell~ code
      PATCH_IF (~%cur_id%~ STRING_EQUAL ~%code%~) BEGIN // slot free in spell.ids
        TEXT_SPRINT cur_id ~%code%~
        PATCH_IF (FILE_EXISTS_IN_GAME ~add_spell.ids~) BEGIN
          LOOKUP_IDS_SYMBOL_OF_INT cur_id ~add_spell~ code
        END
        PATCH_IF (~%cur_id%~ STRING_EQUAL ~%code%~) BEGIN // slot free in add_spell.ids
          PATCH_IF (NOT FILE_EXISTS_IN_GAME ~sp%memo%%level%%num%.spl~) BEGIN // no .spl exists with this designation
            SET found_slot = 1
          END
        END
      END
    END
    PATCH_IF (!found_slot) BEGIN
      SET code = (0 - 1)
    END
  END
END

DEFINE_ACTION_FUNCTION ~TB#ADD_SPELL~ 
  INT_VAR type = 1
          level = 1
          use_ple = 0
          use_pld = 0
  STR_VAR identifier = ~~
    source_file = ~~
  RET newcode
BEGIN
  // check if spell has entry in spell.ids
  OUTER_SET code = IDS_OF_SYMBOL (~spell~ ~%identifier%~)
  
  // check if spell has entry in add_spell.ids
  OUTER_SET code2 = (0 - 1)
  ACTION_IF (FILE_EXISTS_IN_GAME ~add_spell.ids~) BEGIN
    OUTER_SET code2 = IDS_OF_SYMBOL (~add_spell~ ~%identifier%~)
  END
  
  LAUNCH_ACTION_FUNCTION ~TB#ADD_SPELL_CHECK_MATCH~ INT_VAR scode = code RET doesmatch = doesmatch END
  ACTION_IF (doesmatch) BEGIN // entry in spell.ids matches level and type
    OUTER_SET newcode = code
    LAUNCH_ACTION_FUNCTION ~TB#ADD_SPELL_CHECK_MATCH~ INT_VAR scode = code2 RET doesmatch2 = doesmatch END
    ACTION_IF (doesmatch2) BEGIN
      // use entry from add_spell.ids
      OUTER_SET newcode = code2
      ACTION_IF (code != code2) BEGIN
        // remove old entry
        COPY_EXISTING ~spell.ids~ ~override~
          REPLACE_TEXTUALLY ~%WNL%~ ~%LNL%~
          REPLACE_TEXTUALLY ~%MNL%~ ~%LNL%~
          REPLACE_TEXTUALLY ~%LNL%[ %TAB%]*[^ %TAB%]+[ %TAB%]+%identifier%[ %TAB%]*$~ ~~
          REPLACE_TEXTUALLY ~%LNL%~ ~%WNL%~
        LAUNCH_ACTION_FUNCTION ~TB#ADD_SPELL_GET_CODE~ INT_VAR scode = code RET filecode = filecode END
        ACTION_IF (use_pld && FILE_EXISTS_IN_GAME ~sp%filecode%.spl~) BEGIN
          COPY_EXISTING ~sp%filecode%.spl~ ~override~
            LAUNCH_PATCH_MACRO TB#ADD_SPELL_PLD
        END
      END
    END
  END
  ELSE BEGIN // no matching entry in spell.ids
    ACTION_IF (code >= 0) BEGIN // existing entry in spell.ids has wrong level/type
      // remove old entry
      COPY_EXISTING ~spell.ids~ ~override~
        REPLACE_TEXTUALLY ~%WNL%~ ~%LNL%~
        REPLACE_TEXTUALLY ~%MNL%~ ~%LNL%~
        REPLACE_TEXTUALLY ~%LNL%[ %TAB%]*[^ %TAB%]+[ %TAB%]+%identifier%[ %TAB%]*$~ ~~
        REPLACE_TEXTUALLY ~%LNL%~ ~%WNL%~
      LAUNCH_ACTION_FUNCTION ~TB#ADD_SPELL_GET_CODE~ INT_VAR scode = code RET filecode = filecode END
      ACTION_IF (use_pld && FILE_EXISTS_IN_GAME ~sp%filecode%.spl~) BEGIN
        COPY_EXISTING ~sp%filecode%.spl~ ~override~
          LAUNCH_PATCH_MACRO TB#ADD_SPELL_PLD
      END
    END
    // determine what slot the new entry will use
    LAUNCH_ACTION_FUNCTION ~TB#ADD_SPELL_CHECK_MATCH~ INT_VAR scode = code2 RET doesmatch2 = doesmatch END
    ACTION_IF (doesmatch2) BEGIN
      // use entry from add_spell.ids
      OUTER_SET newcode = code2
    END
    ELSE BEGIN
      // find a free slot for the spell
      LAUNCH_ACTION_FUNCTION ~TB#ADD_SPELL_FIND_SLOT~ RET newcode = code END
    END
  END
  
  ACTION_IF (newcode < 0) BEGIN
    PRINT ~Couldn't add %identifier% to spell.ids as no slots remain~
  END
  ELSE BEGIN
    // copy .spl
    LAUNCH_ACTION_FUNCTION ~TB#ADD_SPELL_GET_CODE~ INT_VAR scode = newcode RET filecode = filecode END
    ACTION_IF (use_ple && FILE_EXISTS_IN_GAME ~sp%filecode%.spl~) BEGIN
      COPY_EXISTING ~sp%filecode%.spl~ ~override~
        LAUNCH_PATCH_MACRO TB#ADD_SPELL_PLE
    END
    ELSE BEGIN
      COPY ~%source_file%~ ~override/sp%filecode%.spl~
        LAUNCH_PATCH_MACRO TB#ADD_SPELL_PL
    END
    
    // update spell.ids
    ACTION_IF (code != newcode) BEGIN
      APPEND ~spell.ids~ ~%newcode% %identifier%~
    END
    
    // update add_spell.ids
    ACTION_IF (code2 != newcode) BEGIN
      ACTION_IF (NOT FILE_EXISTS_IN_GAME ~add_spell.ids~) BEGIN
        COPY + ~.../inlined/null.file~ ~override/add_spell.ids~
      END
      COPY_EXISTING + ~add_spell.ids~ ~override~ // APPEND + ~add_spell.ids~ ~%newcode% %identifier%~
        TEXT_SPRINT append ~%newcode% %identifier%%WNL%~
        INSERT_BYTES SOURCE_SIZE (STRING_LENGTH ~%append%~)
        WRITE_ASCIIE SOURCE_SIZE ~%append%~
      CLEAR_IDS_MAP
    END
  END
END
